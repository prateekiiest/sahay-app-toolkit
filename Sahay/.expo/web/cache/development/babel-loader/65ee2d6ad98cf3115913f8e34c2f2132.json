{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BackButton = BackButton;\nexports.LeftButton = LeftButton;\nexports.RightButton = RightButton;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNavigationStack = require(\"react-navigation-stack\");\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNavigation = require(\"react-navigation\");\n\nvar _reactNavigationDrawer = require(\"react-navigation-drawer\");\n\nvar _back_chevron = _interopRequireDefault(require(\"../images/back_chevron.png\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\prate\\\\source\\\\prateekiiest\\\\sahay-app-toolkit\\\\Sahay\\\\node_modules\\\\react-native-router-flux\\\\src\\\\NavBar.js\";\nvar hitSlop = {\n  top: 15,\n  bottom: 15,\n  left: 15,\n  right: 15\n};\n\nfunction BackButton(state) {\n  var textButtonStyle = [styles.barBackButtonText, state.backButtonTextStyle];\n  var style = [styles.backButton, state.leftButtonStyle];\n  var buttonImage = state.backButtonImage || _back_chevron.default;\n  var tintColor = getValue(state.backButtonTintColor, state) || state.tintColor || state.navBarButtonColor || state.headerTintColor;\n  var onPress = state.onBack;\n\n  if (onPress) {\n    onPress = onPress.bind(null, state);\n  } else {\n    onPress = function onPress() {\n      return state.navigation.dispatch(_reactNavigation.NavigationActions.back());\n    };\n  }\n\n  if (!state.backButtonImage) {\n    return _react.default.createElement(_reactNavigationStack.HeaderBackButton, {\n      onPress: onPress,\n      title: state.backTitle,\n      titleStyle: textButtonStyle,\n      tintColor: tintColor,\n      truncatedTitle: state.truncatedTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 12\n      }\n    });\n  }\n\n  var text = state.backTitle ? _react.default.createElement(_reactNative.Text, {\n    style: textButtonStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 34\n    }\n  }, state.backTitle) : null;\n  return _react.default.createElement(_reactNative.TouchableOpacity, {\n    testID: \"backNavButton\",\n    style: styles.backButtonContainer,\n    onPress: onPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, buttonImage && !state.hideBackImage && _react.default.createElement(_reactNative.Image, {\n    source: buttonImage,\n    style: [styles.backButtonImage, state.barButtonIconStyle, state.leftButtonIconStyle, {\n      tintColor: tintColor\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 49\n    }\n  }), text));\n}\n\nfunction LeftButton(state) {\n  var onPress = state.onLeft;\n  var buttonImage = getValue(state.leftButtonImage, state);\n  var menuIcon = getValue(state.drawerIcon, state);\n  var style = [styles.leftButton, state.leftButtonStyle];\n  var leftButtonTextStyle = getValue(state.leftButtonTextStyle, state);\n  var leftButtonIconStyle = getValue(state.leftButtonIconStyle, state);\n  var leftButtonStyle = [styles.defaultImageStyle, leftButtonIconStyle];\n  var leftTitle = state.getLeftTitle ? state.getLeftTitle(state) : getValue(state.leftTitle, state);\n  var textColor = getValue(state.leftButtonTintColor, state);\n  var tintColor = textColor || state.tintColor || state.navBarButtonColor || state.headerTintColor;\n  var textStyle = [styles.barLeftButtonText, tintColor && {\n    color: tintColor\n  }, leftButtonTextStyle, textColor && {\n    color: textColor\n  }];\n\n  if (state.leftButton || state.left) {\n    var Button = state.leftButton || state.left;\n    return _react.default.createElement(Button, (0, _extends2.default)({}, state, {\n      key: \"leftNavBarBtn\",\n      testID: \"leftNavButton\",\n      style: [].concat(style, leftButtonStyle),\n      textStyle: textStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 12\n      }\n    }));\n  }\n\n  if (!onPress && !state.hideDrawerButton && (state.drawerImage || menuIcon) && state.drawerPosition !== 'right') {\n    buttonImage = state.drawerImage;\n\n    if (buttonImage || menuIcon) {\n      onPress = function onPress() {\n        return state.navigation.dispatch(_reactNavigationDrawer.DrawerActions.openDrawer());\n      };\n    }\n\n    if (!menuIcon) {\n      menuIcon = _react.default.createElement(_reactNative.Image, {\n        source: buttonImage,\n        style: [state.leftButtonIconStyle || styles.defaultImageStyle, {\n          tintColor: tintColor\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 18\n        }\n      });\n    }\n  }\n\n  if (onPress && (leftTitle || buttonImage || menuIcon)) {\n    onPress = onPress.bind(null, state);\n    return _react.default.createElement(_reactNative.TouchableOpacity, {\n      key: \"leftNavBarBtn\",\n      testID: \"leftNavButton\",\n      style: style,\n      onPress: onPress,\n      hitSlop: state.hitSlop || hitSlop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, leftTitle && _react.default.createElement(_reactNative.Text, {\n      style: textStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 23\n      }\n    }, leftTitle), !leftTitle && (menuIcon || buttonImage) && _react.default.createElement(_reactNative.View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'flex-start'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, menuIcon || _react.default.createElement(_reactNative.Image, {\n      source: buttonImage,\n      style: [state.leftButtonIconStyle || styles.defaultImageStyle, {\n        tintColor: tintColor\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 26\n      }\n    })));\n  }\n\n  if (!!state.onLeft ^ !!(leftTitle || buttonImage || menuIcon)) {\n    console.warn(\"Both onLeft and leftTitle/leftButtonImage\\n            must be specified for the scene: \" + state.name);\n  }\n\n  return null;\n}\n\nfunction getValue(value, params) {\n  return value instanceof Function ? value(params) : value;\n}\n\nfunction RightButton(state) {\n  if (!state) {\n    return null;\n  }\n\n  var onPress = state.onRight;\n  var buttonImage = getValue(state.rightButtonImage, state);\n  var menuIcon = state.drawerIcon;\n  var style = [styles.rightButton, state.rightButtonStyle];\n  var rightButtonTextStyle = getValue(state.rightButtonTextStyle, state);\n  var rightButtonIconStyle = getValue(state.rightButtonIconStyle, state);\n  var rightButtonStyle = [styles.defaultImageStyle, rightButtonIconStyle];\n  var rightTitle = state.getRightTitle ? state.getRightTitle(state) : getValue(state.rightTitle, state);\n  var textColor = getValue(state.rightButtonTintColor, state);\n  var tintColor = textColor || state.tintColor || state.navBarButtonColor || state.headerTintColor;\n  var textStyle = [styles.barRightButtonText, tintColor && {\n    color: tintColor\n  }, rightButtonTextStyle, textColor && {\n    color: textColor\n  }];\n\n  if (state.rightButton || state.right) {\n    var Button = state.rightButton || state.right;\n    return _react.default.createElement(Button, (0, _extends2.default)({}, state, {\n      key: \"rightNavBarBtn\",\n      testID: \"rightNavButton\",\n      style: style,\n      textButtonStyle: textStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 12\n      }\n    }));\n  }\n\n  if (!onPress && !state.hideDrawerButton && state.drawerImage && state.drawerPosition === 'right') {\n    buttonImage = state.drawerImage;\n\n    if (buttonImage || menuIcon) {\n      onPress = function onPress() {\n        return state.navigation.dispatch(_reactNavigationDrawer.DrawerActions.openDrawer());\n      };\n    }\n\n    if (!menuIcon) {\n      menuIcon = _react.default.createElement(_reactNative.Image, {\n        source: buttonImage,\n        style: [rightButtonStyle, {\n          tintColor: tintColor\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 18\n        }\n      });\n    }\n  }\n\n  if (onPress && (rightTitle || buttonImage)) {\n    onPress = onPress.bind(null, state);\n    return _react.default.createElement(_reactNative.TouchableOpacity, {\n      key: \"rightNavBarBtn\",\n      testID: \"rightNavButton\",\n      style: style,\n      onPress: onPress,\n      hitSlop: state.hitSlop || hitSlop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 7\n      }\n    }, rightTitle && _react.default.createElement(_reactNative.Text, {\n      style: textStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 24\n      }\n    }, rightTitle), !rightTitle && buttonImage && _react.default.createElement(_reactNative.View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'flex-end'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }\n    }, menuIcon || _react.default.createElement(_reactNative.Image, {\n      source: buttonImage,\n      style: [state.rightButtonIconStyle || styles.defaultImageStyle, {\n        tintColor: tintColor\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 26\n      }\n    })));\n  }\n\n  if (!!state.onRight ^ !!(typeof rightTitle !== 'undefined' || typeof buttonImage !== 'undefined')) {\n    console.warn(\"Both onRight and rightTitle/rightButtonImage\\n            must be specified for the scene: \" + state.routeName);\n  }\n\n  return null;\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  title: {\n    textAlign: 'center',\n    color: '#0A0A0A',\n    fontSize: 18,\n    width: 180,\n    alignSelf: 'center'\n  },\n  titleImage: {\n    width: 180,\n    alignSelf: 'center'\n  },\n  titleWrapper: (0, _extends2.default)({\n    marginTop: 10\n  }, _reactNative.Platform.select({\n    ios: {\n      top: 20\n    },\n    android: {\n      top: 5\n    },\n    windows: {\n      top: 5\n    }\n  })),\n  header: (0, _extends2.default)({\n    backgroundColor: '#EFEFF2',\n    paddingTop: 0\n  }, _reactNative.Platform.select({\n    ios: {\n      height: 64\n    },\n    android: {\n      height: 54\n    },\n    windows: {\n      height: 54\n    }\n  }), {\n    borderBottomWidth: 0.5,\n    borderBottomColor: '#828287'\n  }),\n  backButton: (0, _extends2.default)({}, _reactNative.Platform.select({\n    ios: {\n      top: 12\n    },\n    android: {\n      top: 10\n    },\n    windows: {\n      top: 8\n    }\n  }), {\n    left: 2,\n    paddingLeft: 8,\n    flexDirection: 'row',\n    transform: [{\n      scaleX: _reactNative.I18nManager.isRTL ? -1 : 1\n    }]\n  }),\n  rightButton: {\n    right: 2,\n    paddingRight: 8\n  },\n  leftButton: {\n    left: 2,\n    paddingLeft: 8\n  },\n  barRightButtonText: {\n    color: 'rgb(0, 122, 255)',\n    textAlign: 'right',\n    fontSize: 17\n  },\n  barBackButtonText: {\n    color: 'rgb(0, 122, 255)',\n    textAlign: 'left',\n    fontSize: 17,\n    paddingLeft: 6\n  },\n  barLeftButtonText: {\n    color: 'rgb(0, 122, 255)',\n    textAlign: 'left',\n    fontSize: 17\n  },\n  backButtonContainer: {\n    height: 50,\n    width: 70\n  },\n  backButtonImage: (0, _extends2.default)({}, _reactNative.Platform.select({\n    android: {\n      marginTop: 5\n    }\n  }), {\n    width: 13,\n    height: 21\n  }),\n  defaultImageStyle: {\n    height: 24,\n    resizeMode: 'contain'\n  }\n});","map":{"version":3,"sources":["C:/Users/prate/source/prateekiiest/sahay-app-toolkit/Sahay/node_modules/react-native-router-flux/src/NavBar.js"],"names":["hitSlop","top","bottom","left","right","BackButton","state","textButtonStyle","styles","barBackButtonText","backButtonTextStyle","style","backButton","leftButtonStyle","buttonImage","backButtonImage","_backButtonImage","tintColor","getValue","backButtonTintColor","navBarButtonColor","headerTintColor","onPress","onBack","bind","navigation","dispatch","NavigationActions","back","backTitle","truncatedTitle","text","backButtonContainer","hideBackImage","barButtonIconStyle","leftButtonIconStyle","LeftButton","onLeft","leftButtonImage","menuIcon","drawerIcon","leftButton","leftButtonTextStyle","defaultImageStyle","leftTitle","getLeftTitle","textColor","leftButtonTintColor","textStyle","barLeftButtonText","color","Button","hideDrawerButton","drawerImage","drawerPosition","DrawerActions","openDrawer","flex","justifyContent","alignItems","console","warn","name","value","params","Function","RightButton","onRight","rightButtonImage","rightButton","rightButtonStyle","rightButtonTextStyle","rightButtonIconStyle","rightTitle","getRightTitle","rightButtonTintColor","barRightButtonText","routeName","StyleSheet","create","title","textAlign","fontSize","width","alignSelf","titleImage","titleWrapper","marginTop","Platform","select","ios","android","windows","header","backgroundColor","paddingTop","height","borderBottomWidth","borderBottomColor","paddingLeft","flexDirection","transform","scaleX","I18nManager","isRTL","paddingRight","resizeMode"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { HeaderBackButton } from 'react-navigation-stack';\nimport {\n  Platform, I18nManager, Image, StyleSheet, Text, TouchableOpacity, View,\n} from 'react-native';\nimport { NavigationActions } from 'react-navigation';\nimport { DrawerActions } from 'react-navigation-drawer';\nimport _backButtonImage from '../images/back_chevron.png';\n\nconst hitSlop = {\n  top: 15,\n  bottom: 15,\n  left: 15,\n  right: 15,\n};\nexport function BackButton(state) {\n  const textButtonStyle = [styles.barBackButtonText, state.backButtonTextStyle];\n  const style = [styles.backButton, state.leftButtonStyle];\n  const buttonImage = state.backButtonImage || _backButtonImage;\n  const tintColor = getValue(state.backButtonTintColor, state) || state.tintColor || state.navBarButtonColor || state.headerTintColor;\n  let onPress = state.onBack;\n  if (onPress) {\n    onPress = onPress.bind(null, state);\n  } else {\n    onPress = () => state.navigation.dispatch(NavigationActions.back());\n  }\n\n  // returning react-navigation's back button well styled for ios and android if rnrf4-supported customization\n  // is not required\n  if (!state.backButtonImage) {\n    return <HeaderBackButton onPress={onPress} title={state.backTitle} titleStyle={textButtonStyle} tintColor={tintColor} truncatedTitle={state.truncatedTitle} />;\n  }\n\n  const text = state.backTitle ? <Text style={textButtonStyle}>{state.backTitle}</Text> : null;\n\n  return (\n    <TouchableOpacity testID=\"backNavButton\" style={styles.backButtonContainer} onPress={onPress}>\n      <View style={style}>\n        {buttonImage && !state.hideBackImage && <Image source={buttonImage} style={[styles.backButtonImage, state.barButtonIconStyle, state.leftButtonIconStyle, { tintColor }]} />}\n        {text}\n      </View>\n    </TouchableOpacity>\n  );\n}\n\nexport function LeftButton(state) {\n  let onPress = state.onLeft;\n  let buttonImage = getValue(state.leftButtonImage, state);\n  let menuIcon = getValue(state.drawerIcon, state);\n  const style = [styles.leftButton, state.leftButtonStyle];\n  const leftButtonTextStyle = getValue(state.leftButtonTextStyle, state);\n  const leftButtonIconStyle = getValue(state.leftButtonIconStyle, state);\n  const leftButtonStyle = [styles.defaultImageStyle, leftButtonIconStyle];\n  const leftTitle = state.getLeftTitle ? state.getLeftTitle(state) : getValue(state.leftTitle, state);\n  const textColor = getValue(state.leftButtonTintColor, state);\n  const tintColor = textColor || state.tintColor || state.navBarButtonColor || state.headerTintColor;\n  const textStyle = [styles.barLeftButtonText, tintColor && { color: tintColor }, leftButtonTextStyle, textColor && { color: textColor }];\n\n  if (state.leftButton || state.left) {\n    const Button = state.leftButton || state.left;\n    return <Button {...state} key=\"leftNavBarBtn\" testID=\"leftNavButton\" style={[...style, ...leftButtonStyle]} textStyle={textStyle} />;\n  }\n\n  if (!onPress && !state.hideDrawerButton && (state.drawerImage || menuIcon) && state.drawerPosition !== 'right') {\n    buttonImage = state.drawerImage;\n    if (buttonImage || menuIcon) {\n      onPress = () => state.navigation.dispatch(DrawerActions.openDrawer());\n    }\n    if (!menuIcon) {\n      menuIcon = <Image source={buttonImage} style={[state.leftButtonIconStyle || styles.defaultImageStyle, { tintColor }]} />;\n    }\n  }\n\n  if (onPress && (leftTitle || buttonImage || menuIcon)) {\n    onPress = onPress.bind(null, state);\n    return (\n      <TouchableOpacity key=\"leftNavBarBtn\" testID=\"leftNavButton\" style={style} onPress={onPress} hitSlop={state.hitSlop || hitSlop}>\n        {leftTitle && <Text style={textStyle}>{leftTitle}</Text>}\n        {!leftTitle && (menuIcon || buttonImage) && (\n          <View\n            style={{\n              flex: 1,\n              justifyContent: 'center',\n              alignItems: 'flex-start',\n            }}\n          >\n            {menuIcon || <Image source={buttonImage} style={[state.leftButtonIconStyle || styles.defaultImageStyle, { tintColor }]} />}\n          </View>\n        )}\n      </TouchableOpacity>\n    );\n  }\n  if (!!state.onLeft ^ !!(leftTitle || buttonImage || menuIcon)) {\n    console.warn(`Both onLeft and leftTitle/leftButtonImage\n            must be specified for the scene: ${state.name}`);\n  }\n  return null;\n}\n\nfunction getValue(value, params) {\n  return value instanceof Function ? value(params) : value;\n}\n\nexport function RightButton(state) {\n  if (!state) {\n    return null;\n  }\n\n  let onPress = state.onRight;\n  let buttonImage = getValue(state.rightButtonImage, state);\n  let menuIcon = state.drawerIcon;\n  const style = [styles.rightButton, state.rightButtonStyle];\n  const rightButtonTextStyle = getValue(state.rightButtonTextStyle, state);\n  const rightButtonIconStyle = getValue(state.rightButtonIconStyle, state);\n  const rightButtonStyle = [styles.defaultImageStyle, rightButtonIconStyle];\n  const rightTitle = state.getRightTitle ? state.getRightTitle(state) : getValue(state.rightTitle, state);\n  const textColor = getValue(state.rightButtonTintColor, state);\n  const tintColor = textColor || state.tintColor || state.navBarButtonColor || state.headerTintColor;\n  const textStyle = [styles.barRightButtonText, tintColor && { color: tintColor }, rightButtonTextStyle, textColor && { color: textColor }];\n\n  if (state.rightButton || state.right) {\n    const Button = state.rightButton || state.right;\n    return <Button {...state} key=\"rightNavBarBtn\" testID=\"rightNavButton\" style={style} textButtonStyle={textStyle} />;\n  }\n\n  if (!onPress && !state.hideDrawerButton && state.drawerImage && state.drawerPosition === 'right') {\n    buttonImage = state.drawerImage;\n    if (buttonImage || menuIcon) {\n      onPress = () => state.navigation.dispatch(DrawerActions.openDrawer());\n    }\n    if (!menuIcon) {\n      menuIcon = <Image source={buttonImage} style={[rightButtonStyle, { tintColor }]} />;\n    }\n  }\n\n  if (onPress && (rightTitle || buttonImage)) {\n    onPress = onPress.bind(null, state);\n    return (\n      <TouchableOpacity key=\"rightNavBarBtn\" testID=\"rightNavButton\" style={style} onPress={onPress} hitSlop={state.hitSlop || hitSlop}>\n        {rightTitle && <Text style={textStyle}>{rightTitle}</Text>}\n        {!rightTitle && buttonImage && (\n          <View\n            style={{\n              flex: 1,\n              justifyContent: 'center',\n              alignItems: 'flex-end',\n            }}\n          >\n            {menuIcon || <Image source={buttonImage} style={[state.rightButtonIconStyle || styles.defaultImageStyle, { tintColor }]} />}\n          </View>\n        )}\n      </TouchableOpacity>\n    );\n  }\n  if (!!state.onRight ^ !!(typeof rightTitle !== 'undefined' || typeof buttonImage !== 'undefined')) {\n    console.warn(`Both onRight and rightTitle/rightButtonImage\n            must be specified for the scene: ${state.routeName}`);\n  }\n  return null;\n}\nconst styles = StyleSheet.create({\n  title: {\n    textAlign: 'center',\n    color: '#0A0A0A',\n    fontSize: 18,\n    width: 180,\n    alignSelf: 'center',\n  },\n  titleImage: {\n    width: 180,\n    alignSelf: 'center',\n  },\n  titleWrapper: {\n    marginTop: 10,\n    ...Platform.select({\n      ios: {\n        top: 20,\n      },\n      android: {\n        top: 5,\n      },\n      windows: {\n        top: 5,\n      },\n    }),\n  },\n  header: {\n    backgroundColor: '#EFEFF2',\n    paddingTop: 0,\n    ...Platform.select({\n      ios: {\n        height: 64,\n      },\n      android: {\n        height: 54,\n      },\n      windows: {\n        height: 54,\n      },\n    }),\n    borderBottomWidth: 0.5,\n    borderBottomColor: '#828287',\n  },\n  backButton: {\n    ...Platform.select({\n      ios: {\n        top: 12,\n      },\n      android: {\n        top: 10,\n      },\n      windows: {\n        top: 8,\n      },\n    }),\n    left: 2,\n    paddingLeft: 8,\n    flexDirection: 'row',\n    transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }],\n  },\n  rightButton: {\n    right: 2,\n    paddingRight: 8,\n  },\n  leftButton: {\n    left: 2,\n    paddingLeft: 8,\n  },\n  barRightButtonText: {\n    color: 'rgb(0, 122, 255)',\n    textAlign: 'right',\n    fontSize: 17,\n  },\n  barBackButtonText: {\n    color: 'rgb(0, 122, 255)',\n    textAlign: 'left',\n    fontSize: 17,\n    paddingLeft: 6,\n  },\n  barLeftButtonText: {\n    color: 'rgb(0, 122, 255)',\n    textAlign: 'left',\n    fontSize: 17,\n  },\n  backButtonContainer: {\n    height: 50,\n    width: 70,\n  },\n  backButtonImage: {\n    ...Platform.select({\n      android: {\n        marginTop: 5,\n      },\n    }),\n    width: 13,\n    height: 21,\n  },\n  defaultImageStyle: {\n    height: 24,\n    resizeMode: 'contain',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}